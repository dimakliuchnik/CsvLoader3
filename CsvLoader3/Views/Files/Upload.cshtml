@using System.Data
@model List<CsvLoader3.Models.FilesModel>

@{
    ViewBag.Title = "Upload";
}

<h2>Upload File</h2>

@using (Html.BeginForm("Upload", "Files", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary()

    <div class="form-group">
        <input type="file" id="uploadFile" name="file" />
    </div>

    <div class="form-group">
       <a href="#" id="btnUpload" value="Upload" class="btn btn-primary">Upload file</a>
        <!--<input type="submit" id ="btnUpload" value="Upload" class="btn btn-default" />-->
<!--<input type="submit" id ="btnUpload" class="btn btn-default" />-->
    </div>

    if (Model != null)
    {
        <table border="1" width="80%">
            <thead>
                <tr>
                    <th><center>File</center></th>
                    <th><center>Header</center></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var row in Model)
                {
                    <tr>
                        <td>@row.FileName</td>
                        <td>@row.Header</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

    @section Scripts
{
        <script>

            $(document).ready(function () {

                $('#btnUpload').click(function () {
                    UploadFile($('#uploadFile')[0].files);
                }
                );

            });

            function UploadFileChunk(Chunk, FileName) {
                var FD = new FormData();
                FD.append('file', Chunk, FileName);
                $.ajax({
                    type: "POST",
                    url: 'http://localhost:65166/Files/UploadFile/',
                    contentType: false,
                    processData: false,
                    data: FD
                });
            }

            function UploadFile(TargetFile) {
                //debugger;
                // create array to store the buffer chunks
                var FileChunk = [];
                // the file object itself that we will work with
                var file = TargetFile[0];
                // set up other initial vars
                var MaxFileSizeMB = 1;
                var BufferChunkSize = MaxFileSizeMB * (1024 * 1024);
                var ReadBuffer_Size = 1024;
                var FileStreamPos = 0;
                // set the initial chunk length
                var EndPos = BufferChunkSize;
                var Size = file.size;

                // add to the FileChunk array until we get to the end of the file
                while (FileStreamPos < Size) {
                    // "slice" the file from the starting position/offset, to  the required length
                    FileChunk.push(file.slice(FileStreamPos, EndPos));
                    FileStreamPos = EndPos; // jump by the amount read
                    EndPos = FileStreamPos + BufferChunkSize; // set next chunk length
                }
                // get total number of "files" we will be sending
                var TotalParts = FileChunk.length;
                var PartCount = 0;
                // loop through, pulling the first item from the array each time and sending it
                while (chunk = FileChunk.shift()) {
                    PartCount++;
                    // file name convention
                    var FilePartName = file.name + ".part_" + PartCount + "." + TotalParts;
                    // send the file
                    UploadFileChunk(chunk, FilePartName);
                }
            }
        </script>
    }
